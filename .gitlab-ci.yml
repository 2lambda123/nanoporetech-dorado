stages:
  - pre-flight
  - build
  - test

variables:
  BUILD_DIR: build
  GIT_SUBMODULE_STRATEGY: recursive

# Build stage components

.macos_runner: &macos_runner
  tags:
    - macos
    - m1

.linux_runner: &linux_runner
  tags:
    - nvidia-docker

.windows_runner: &windows_runner
  tags:
    - win10-gpu

.linux_dependencies: &linux_dependencies
  before_script:
    - echo Dorado dependency stage
    - apt-get update && apt-get install -y --no-install-recommends libhdf5-dev libssl-dev libzstd-dev

.build_dorado: &build_dorado
  stage: build
  script:
    - echo Dorado build stage
    - cmake ${BUILD_OPTIONS} -S . -B ${BUILD_DIR}
    - cmake --build ${BUILD_DIR} --config Release --target install -j 8
    - ctest -C Release --test-dir ${BUILD_DIR}
  artifacts:
    paths:
      - dist
    expire_in: 1 day

.build_dorado_archive: &build_dorado_archive
  stage: build
  script:
    - cmake ${BUILD_OPTIONS} -S . -B ${BUILD_DIR}
    - cmake --build ${BUILD_DIR} --config Release -j 8
    - cpack --config ${BUILD_DIR}/CPackConfig.cmake
  artifacts:
    paths:
      - archive
    expire_in: 1 day

# Pre-flight stages

pre-commit:
  image: python:3.9
  stage: pre-flight
  script:
    - pip install pre-commit
    - pre-commit run --all-files
  <<: *linux_runner

# Build stages

build:linux:x86:focal:install_deps:
  image: ${DORADO_NO_DEPS}
  <<: *linux_dependencies
  <<: *linux_runner
  <<: *build_dorado
  when: manual

build:linux:x86:focal:
  image: ${DORADO_DEPS}
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
  <<: *linux_runner
  <<: *build_dorado

build:linux:x86:focal_koi_download:
  image: ${DORADO_DEPS}
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch"
  <<: *linux_runner
  <<: *build_dorado

build:windows:
  variables:
    BUILD_OPTIONS: "-A x64 -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
  <<: *windows_runner
  <<: *build_dorado
  when: manual
  before_script:
    - export PATH=${PATH}:${PWD}/dist/bin

build:windows_koi_download:
  variables:
    BUILD_OPTIONS: "-A x64"
  <<: *windows_runner
  <<: *build_dorado
  when: manual
  before_script:
    - export PATH=${PATH}:${PWD}/dist/bin

build:macos:m1:
  variables:
  <<: *macos_runner
  <<: *build_dorado

build_archive:linux:x86:focal:
  image: ${DORADO_DEPS}
  variables:
    BUILD_OPTIONS: "-DDORADO_LIBTORCH_DIR=/usr/local/libtorch -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
  <<: *linux_runner
  <<: *build_dorado_archive
  when: manual

build_archive:windows:
  variables:
    BUILD_OPTIONS: "-A x64 -DBUILD_KOI_FROM_SOURCE=ON -DGITLAB_CI_TOKEN=${CI_JOB_TOKEN}"
  <<: *windows_runner
  <<: *build_dorado_archive
  when: manual

build_archive:macos:m1:
  variables:
  <<: *macos_runner
  <<: *build_dorado_archive
  when: manual

# Test stage components

.test_dorado: &test_dorado
  stage: test
  script:
    - echo Dorado app test stage
    - ./dist/bin/dorado download --model dna_r9.4.1_e8_hac@v3.3
    - ./dist/bin/dorado basecaller dna_r9.4.1_e8_hac@v3.3 ./tests/data/ -r 1 -b 384 > calls.sam

# Test stages

test:linux:x86:focal:
  image: ${DORADO_DEPS}
  <<: *linux_runner
  <<: *test_dorado
  needs:
    - build:linux:x86:focal

test:macos:m1:
  <<: *macos_runner
  <<: *test_dorado
  needs:
    - build:macos:m1

# Single read eval

test:sre-test:
  stage: test
  when: manual
  image: ${TRIGGER_IMAGE}
  script:
    - |
      curl -i --header "Content-Type: application/json" \
      --request POST \
      --data '{
          "key": "'${MLHUB_TRIGGER_KEY}'",
          "script_parameters": {
              "git_checkout":"'${CI_COMMIT_SHA}'",
              "sre_output":"'${SRE_OUTPUT_ROOT}'/'${CI_COMMIT_SHA}'/",
              "models":["dna_r10.4.1_e8.2_fast@v3.5.1","dna_r10.4.1_e8.2_hac@v3.5.1","dna_r10.4.1_e8.2_sup@v3.5.1"],
              "basecaller_args":[["default",""]]
          }
      }' \
      ${MLHUB_TRIGGER_URL}
