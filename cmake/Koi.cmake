find_package(CUDAToolkit REQUIRED)

OPTION(BUILD_KOI_FROM_SOURCE OFF)

if(CMAKE_SYSTEM_NAME STREQUAL "Linux" OR WIN32)

    if(BUILD_KOI_FROM_SOURCE)
        message(STATUS "Building Koi from source")

        set(KOI_DIR "${DORADO_3RD_PARTY}/koi")

        if(NOT EXISTS ${KOI_DIR})
            if(DEFINED GITLAB_CI_TOKEN)
                message("Cloning Koi using CI token")
                execute_process(COMMAND git clone https://gitlab-ci-token:${GITLAB_CI_TOKEN}@git.oxfordnanolabs.local/machine-learning/koi.git ${KOI_DIR})
            else()
                message("Cloning Koi using ssh")
                execute_process(COMMAND git clone git@git.oxfordnanolabs.local:machine-learning/koi.git ${KOI_DIR})
            endif()
            execute_process(COMMAND git checkout fb8a97457833928ca341b3e378f6569a78f644c9 WORKING_DIRECTORY ${KOI_DIR})
        endif()
        add_subdirectory(${KOI_DIR}/koi/lib)

        set(KOI_INCLUDE ${KOI_DIR}/koi/lib)
        set(KOI_LIBRARIES koi)
    else()
        set(KOI_CUDA "${CUDAToolkit_VERSION_MAJOR}.${CUDAToolkit_VERSION_MINOR}")
        message(STATUS "Using prebuilt Koi CUDA ${KOI_CUDA}")

        if(CMAKE_SYSTEM_NAME STREQUAL "Linux")
            download_and_extract(https://cdn.oxfordnanoportal.com/software/analysis/libkoi-0.2.1-Linux-x86_64-cuda-${KOI_CUDA}.tar.gz koi_lib)
            file(GLOB KOI_DIR "${DORADO_3RD_PARTY}/koi_lib/*")
            set(KOI_LIBRARIES ${KOI_DIR}/lib/libkoi.a)
        elseif(WIN32)
            download_and_extract(https://cdn.oxfordnanoportal.com/software/analysis/libkoi-0.2.1-Windows-AMD64-cuda-${KOI_CUDA}.zip koi_lib)
            file(GLOB KOI_DIR "${DORADO_3RD_PARTY}/koi_lib/*")
            set(KOI_LIBRARIES ${KOI_DIR}/lib/koi.lib)
        endif()
        message(STATUS "KOI_DIR is ${KOI_DIR}")
        set(KOI_INCLUDE ${KOI_DIR}/include)
        message(STATUS "KOI_INCLUDE is ${KOI_INCLUDE}")
        execute_process(COMMAND ls ${KOI_INCLUDE})     
    endif()
endif()
